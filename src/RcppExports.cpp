// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

// [[Rcpp::depends(RcppEigen)]]

#include <Rcpp.h>
#include <RcppEigen.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// productPowerMinusHalf
double productPowerMinusHalf(const Rcpp::NumericVector& vec);
RcppExport SEXP _SKFCPD_productPowerMinusHalf(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(productPowerMinusHalf(vec));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W0_matern_5_2_one_dim
Eigen::MatrixXd Construct_W0_matern_5_2_one_dim(const double lambda);
RcppExport SEXP _SKFCPD_Construct_W0_matern_5_2_one_dim(SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W0_matern_5_2_one_dim(lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_matern_5_2_one_dim
Eigen::MatrixXd Construct_G_matern_5_2_one_dim(double delta_x, double lambda);
RcppExport SEXP _SKFCPD_Construct_G_matern_5_2_one_dim(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_matern_5_2_one_dim(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W_matern_5_2_one_dim
Eigen::MatrixXd Construct_W_matern_5_2_one_dim(double delta_x, double lambda);
RcppExport SEXP _SKFCPD_Construct_W_matern_5_2_one_dim(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W_matern_5_2_one_dim(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_W_W0_V
List Construct_G_W_W0_V(double d, double gamma, double eta, const String kernel_type, bool is_initial);
RcppExport SEXP _SKFCPD_Construct_G_W_W0_V(SEXP dSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP is_initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type is_initial(is_initialSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_W_W0_V(d, gamma, eta, kernel_type, is_initial));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_matern_5_2_fastGP
List Construct_G_matern_5_2_fastGP(Eigen::VectorXd delta_x, double lambda);
RcppExport SEXP _SKFCPD_Construct_G_matern_5_2_fastGP(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_matern_5_2_fastGP(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W_matern_5_2_fastGP
List Construct_W_matern_5_2_fastGP(Eigen::VectorXd delta_x, double lambda, Eigen::MatrixXd W0);
RcppExport SEXP _SKFCPD_Construct_W_matern_5_2_fastGP(SEXP delta_xSEXP, SEXP lambdaSEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W_matern_5_2_fastGP(delta_x, lambda, W0));
    return rcpp_result_gen;
END_RCPP
}
// Construct_G_exp_fastGP
List Construct_G_exp_fastGP(Eigen::VectorXd delta_x, double lambda);
RcppExport SEXP _SKFCPD_Construct_G_exp_fastGP(SEXP delta_xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_G_exp_fastGP(delta_x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W_exp_fastGP
List Construct_W_exp_fastGP(Eigen::VectorXd delta_x, double lambda, Eigen::MatrixXd W0);
RcppExport SEXP _SKFCPD_Construct_W_exp_fastGP(SEXP delta_xSEXP, SEXP lambdaSEXP, SEXP W0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W0(W0SEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W_exp_fastGP(delta_x, lambda, W0));
    return rcpp_result_gen;
END_RCPP
}
// Construct_W0_exp_one_dim
Eigen::MatrixXd Construct_W0_exp_one_dim(const double lambda);
RcppExport SEXP _SKFCPD_Construct_W0_exp_one_dim(SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Construct_W0_exp_one_dim(lambda));
    return rcpp_result_gen;
END_RCPP
}
// Get_Q_K
List Get_Q_K(const List GG, const List W, const Eigen::MatrixXd C0, const double VV);
RcppExport SEXP _SKFCPD_Get_Q_K(SEXP GGSEXP, SEXP WSEXP, SEXP C0SEXP, SEXP VVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type GG(GGSEXP);
    Rcpp::traits::input_parameter< const List >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< const double >::type VV(VVSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Q_K(GG, W, C0, VV));
    return rcpp_result_gen;
END_RCPP
}
// Get_log_det_S2_one_dim
List Get_log_det_S2_one_dim(const Eigen::VectorXd param, const bool have_noise, const Eigen::VectorXd delta_x, const Eigen::VectorXd output, const String kernel_type);
RcppExport SEXP _SKFCPD_Get_log_det_S2_one_dim(SEXP paramSEXP, SEXP have_noiseSEXP, SEXP delta_xSEXP, SEXP outputSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const bool >::type have_noise(have_noiseSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_log_det_S2_one_dim(param, have_noise, delta_x, output, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// KF_ini
List KF_ini(double cur_input, double d, double gamma, double eta, const String kernel_type, List G_W_W0_V);
RcppExport SEXP _SKFCPD_KF_ini(SEXP cur_inputSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP G_W_W0_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cur_input(cur_inputSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V(G_W_W0_VSEXP);
    rcpp_result_gen = Rcpp::wrap(KF_ini(cur_input, d, gamma, eta, kernel_type, G_W_W0_V));
    return rcpp_result_gen;
END_RCPP
}
// KF_ini_for_profile_like
List KF_ini_for_profile_like(double cur_input, double d, double gamma, double eta, const String kernel_type, List G_W_W0_V);
RcppExport SEXP _SKFCPD_KF_ini_for_profile_like(SEXP cur_inputSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP G_W_W0_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cur_input(cur_inputSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V(G_W_W0_VSEXP);
    rcpp_result_gen = Rcpp::wrap(KF_ini_for_profile_like(cur_input, d, gamma, eta, kernel_type, G_W_W0_V));
    return rcpp_result_gen;
END_RCPP
}
// get_LY_online
List get_LY_online(double cur_input, List prev_param, double eta, List G_W_W0_V);
RcppExport SEXP _SKFCPD_get_LY_online(SEXP cur_inputSEXP, SEXP prev_paramSEXP, SEXP etaSEXP, SEXP G_W_W0_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cur_input(cur_inputSEXP);
    Rcpp::traits::input_parameter< List >::type prev_param(prev_paramSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V(G_W_W0_VSEXP);
    rcpp_result_gen = Rcpp::wrap(get_LY_online(cur_input, prev_param, eta, G_W_W0_V));
    return rcpp_result_gen;
END_RCPP
}
// KF_param_update_for_profile_like
List KF_param_update_for_profile_like(double cur_input, double cur_num_obs, List prev_param, double d, double gamma, double eta, const String kernel_type, List G_W_W0_V);
RcppExport SEXP _SKFCPD_KF_param_update_for_profile_like(SEXP cur_inputSEXP, SEXP cur_num_obsSEXP, SEXP prev_paramSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP G_W_W0_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cur_input(cur_inputSEXP);
    Rcpp::traits::input_parameter< double >::type cur_num_obs(cur_num_obsSEXP);
    Rcpp::traits::input_parameter< List >::type prev_param(prev_paramSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V(G_W_W0_VSEXP);
    rcpp_result_gen = Rcpp::wrap(KF_param_update_for_profile_like(cur_input, cur_num_obs, prev_param, d, gamma, eta, kernel_type, G_W_W0_V));
    return rcpp_result_gen;
END_RCPP
}
// get_predictive_dist_KF_objective_prior
List get_predictive_dist_KF_objective_prior(double cur_input, double cur_num_obs, List params, List prev_L, double d, double gamma, int model_type, double mu, double sigma_2, double eta, const String kernel_type);
RcppExport SEXP _SKFCPD_get_predictive_dist_KF_objective_prior(SEXP cur_inputSEXP, SEXP cur_num_obsSEXP, SEXP paramsSEXP, SEXP prev_LSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP model_typeSEXP, SEXP muSEXP, SEXP sigma_2SEXP, SEXP etaSEXP, SEXP kernel_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cur_input(cur_inputSEXP);
    Rcpp::traits::input_parameter< double >::type cur_num_obs(cur_num_obsSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< List >::type prev_L(prev_LSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_predictive_dist_KF_objective_prior(cur_input, cur_num_obs, params, prev_L, d, gamma, model_type, mu, sigma_2, eta, kernel_type));
    return rcpp_result_gen;
END_RCPP
}
// get_predictive_dist_direct_objective_prior
double get_predictive_dist_direct_objective_prior(Eigen::VectorXd cur_input_seq, Eigen::MatrixXd d, double gamma, double mu, double sigma_2, double eta);
RcppExport SEXP _SKFCPD_get_predictive_dist_direct_objective_prior(SEXP cur_input_seqSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP muSEXP, SEXP sigma_2SEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cur_input_seq(cur_input_seqSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_predictive_dist_direct_objective_prior(cur_input_seq, d, gamma, mu, sigma_2, eta));
    return rcpp_result_gen;
END_RCPP
}
// GaSP_CPD_pred_dist_objective_prior_KF_online
List GaSP_CPD_pred_dist_objective_prior_KF_online(List KF_params, List prev_L_params, double cur_point, double d, double gamma, int model_type, double mu, double sigma_2, double eta, const String kernel_type, List G_W_W0_V_ini, List G_W_W0_V);
RcppExport SEXP _SKFCPD_GaSP_CPD_pred_dist_objective_prior_KF_online(SEXP KF_paramsSEXP, SEXP prev_L_paramsSEXP, SEXP cur_pointSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP model_typeSEXP, SEXP muSEXP, SEXP sigma_2SEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP G_W_W0_V_iniSEXP, SEXP G_W_W0_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type KF_params(KF_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type prev_L_params(prev_L_paramsSEXP);
    Rcpp::traits::input_parameter< double >::type cur_point(cur_pointSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V_ini(G_W_W0_V_iniSEXP);
    Rcpp::traits::input_parameter< List >::type G_W_W0_V(G_W_W0_VSEXP);
    rcpp_result_gen = Rcpp::wrap(GaSP_CPD_pred_dist_objective_prior_KF_online(KF_params, prev_L_params, cur_point, d, gamma, model_type, mu, sigma_2, eta, kernel_type, G_W_W0_V_ini, G_W_W0_V));
    return rcpp_result_gen;
END_RCPP
}
// GaSP_CPD_pred_dist_objective_prior_direct_online
Eigen::VectorXd GaSP_CPD_pred_dist_objective_prior_direct_online(Eigen::VectorXd cur_seq, List d, double gamma, double eta, double mu, double sigma_2);
RcppExport SEXP _SKFCPD_GaSP_CPD_pred_dist_objective_prior_direct_online(SEXP cur_seqSEXP, SEXP dSEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP muSEXP, SEXP sigma_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type cur_seq(cur_seqSEXP);
    Rcpp::traits::input_parameter< List >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    rcpp_result_gen = Rcpp::wrap(GaSP_CPD_pred_dist_objective_prior_direct_online(cur_seq, d, gamma, eta, mu, sigma_2));
    return rcpp_result_gen;
END_RCPP
}
// CPD_DLM
List CPD_DLM(NumericVector design, Eigen::MatrixXd response, NumericVector gamma, int model_type, NumericVector mu, NumericVector sigma_2, NumericVector eta, const String kernel_type, bool stop_at_first_cp, Eigen::VectorXd hazard_vec, bool truncate_at_prev_cp);
RcppExport SEXP _SKFCPD_CPD_DLM(SEXP designSEXP, SEXP responseSEXP, SEXP gammaSEXP, SEXP model_typeSEXP, SEXP muSEXP, SEXP sigma_2SEXP, SEXP etaSEXP, SEXP kernel_typeSEXP, SEXP stop_at_first_cpSEXP, SEXP hazard_vecSEXP, SEXP truncate_at_prev_cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type design(designSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type response(responseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const String >::type kernel_type(kernel_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type stop_at_first_cp(stop_at_first_cpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type hazard_vec(hazard_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type truncate_at_prev_cp(truncate_at_prev_cpSEXP);
    rcpp_result_gen = Rcpp::wrap(CPD_DLM(design, response, gamma, model_type, mu, sigma_2, eta, kernel_type, stop_at_first_cp, hazard_vec, truncate_at_prev_cp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SKFCPD_productPowerMinusHalf", (DL_FUNC) &_SKFCPD_productPowerMinusHalf, 1},
    {"_SKFCPD_Construct_W0_matern_5_2_one_dim", (DL_FUNC) &_SKFCPD_Construct_W0_matern_5_2_one_dim, 1},
    {"_SKFCPD_Construct_G_matern_5_2_one_dim", (DL_FUNC) &_SKFCPD_Construct_G_matern_5_2_one_dim, 2},
    {"_SKFCPD_Construct_W_matern_5_2_one_dim", (DL_FUNC) &_SKFCPD_Construct_W_matern_5_2_one_dim, 2},
    {"_SKFCPD_Construct_G_W_W0_V", (DL_FUNC) &_SKFCPD_Construct_G_W_W0_V, 5},
    {"_SKFCPD_Construct_G_matern_5_2_fastGP", (DL_FUNC) &_SKFCPD_Construct_G_matern_5_2_fastGP, 2},
    {"_SKFCPD_Construct_W_matern_5_2_fastGP", (DL_FUNC) &_SKFCPD_Construct_W_matern_5_2_fastGP, 3},
    {"_SKFCPD_Construct_G_exp_fastGP", (DL_FUNC) &_SKFCPD_Construct_G_exp_fastGP, 2},
    {"_SKFCPD_Construct_W_exp_fastGP", (DL_FUNC) &_SKFCPD_Construct_W_exp_fastGP, 3},
    {"_SKFCPD_Construct_W0_exp_one_dim", (DL_FUNC) &_SKFCPD_Construct_W0_exp_one_dim, 1},
    {"_SKFCPD_Get_Q_K", (DL_FUNC) &_SKFCPD_Get_Q_K, 4},
    {"_SKFCPD_Get_log_det_S2_one_dim", (DL_FUNC) &_SKFCPD_Get_log_det_S2_one_dim, 5},
    {"_SKFCPD_KF_ini", (DL_FUNC) &_SKFCPD_KF_ini, 6},
    {"_SKFCPD_KF_ini_for_profile_like", (DL_FUNC) &_SKFCPD_KF_ini_for_profile_like, 6},
    {"_SKFCPD_get_LY_online", (DL_FUNC) &_SKFCPD_get_LY_online, 4},
    {"_SKFCPD_KF_param_update_for_profile_like", (DL_FUNC) &_SKFCPD_KF_param_update_for_profile_like, 8},
    {"_SKFCPD_get_predictive_dist_KF_objective_prior", (DL_FUNC) &_SKFCPD_get_predictive_dist_KF_objective_prior, 11},
    {"_SKFCPD_get_predictive_dist_direct_objective_prior", (DL_FUNC) &_SKFCPD_get_predictive_dist_direct_objective_prior, 6},
    {"_SKFCPD_GaSP_CPD_pred_dist_objective_prior_KF_online", (DL_FUNC) &_SKFCPD_GaSP_CPD_pred_dist_objective_prior_KF_online, 12},
    {"_SKFCPD_GaSP_CPD_pred_dist_objective_prior_direct_online", (DL_FUNC) &_SKFCPD_GaSP_CPD_pred_dist_objective_prior_direct_online, 6},
    {"_SKFCPD_CPD_DLM", (DL_FUNC) &_SKFCPD_CPD_DLM, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_SKFCPD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
